#!/usr/bin/env python
"""
Unit test Convolution class for testing convolve_cube() function.

Note
----
Use numpy.array_equal() to compare two arrays with integer elements.
Use numpy.allclose() to compare two arrays with floating-point number elements.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import numba
import unittest
import numpy as np
from project.convolve import Convolve


class TestConvolveCube(unittest.TestCase):
    def test_convolve_cube_1(self):
        """
        Test against 4x4x3 filter
        """
        m = np.ones((2, 2, 5))
        h_pad = 1
        w_pad = 1
        m = Convolve.pad_cube(m, (h_pad, w_pad))

        k = np.ones((3, 3, 5))
        k *= 0.5
        actual = Convolve.convolve_cube(m, k)

        expected = np.array([[10, 10], [10, 10]])
        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_cube_2(self):
        """
        Test against 4x4x3 filter
        """
        m = np.array([
            [
                [0.1, 0.2, 0.3], [0.4, 0.5, 0.6]
            ],
            [
                [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]
            ]
        ])

        # 3x3 kernel
        k = np.array([
            [
                [0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]
            ],
            [
                [1.0, 1.1, 1.2], [1.3, 1.4, 1.5], [1.6, 1.7, 1.8]
            ],
            [
                [1.9, 2.0, 2.1], [2.2, 2.3, 2.4], [2.5, 2.6, 2.7]
            ],
        ])

        h_pad = 1
        w_pad = 1

        m = Convolve.pad_cube(m, (h_pad, w_pad))
        out = Convolve.convolve_cube(m, k)

        actual = out.shape
        expected = (2, 2)
        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_tensor_8_channel_output_for_3_channel_input_training_set(self):
        """
        Test convolve layers.
        """
        training_set_size = 2

        m1 = np.ones((2, 2, 5))
        h_pad = 1
        w_pad = 1
        m1 = Convolve.pad_cube(m1, (h_pad, w_pad))  # to 4x4x5

        expected_c1 = np.array([[10, 10], [10, 10]])
        expected_c2 = np.array([[40, 40], [40, 40]])
        m = np.ones((training_set_size, 4, 4, 5))
        m[0] = m1

        k = np.ones((3, 3, 5, 8))  # 3x3 kernel with 5 channels, 8 output channels
        k[:, :, :, 0] *= 0.5
        k[:, :, :, 2] *= 2
        actual = Convolve.convolve_tensor_dataset_2(m, k, use_padding=False)

        actual_c1 = actual[0, :, :, 0]
        actual_c2 = actual[0, :, :, 2]

        result = np.allclose(actual_c1, expected_c1)
        self.assertTrue(result,
                        "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual_c1, expected_c1))

        result = np.allclose(actual_c2, expected_c2)
        self.assertTrue(result,
                        "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual_c2, expected_c2))

        expected = np.zeros((training_set_size, 2, 2, 8)).shape
        actual = actual.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_training_set_2(self):
        """
        Test convolve training set
        """
        training_set_size = 10

        m = np.ones((training_set_size, 64, 64, 2))  # 1 layer matrix
        k = np.ones((7, 7, 2, 3))  # 7x7 kernel with 2 channels, 3 output channels
        output = np.zeros((training_set_size, 64, 64, 3))
        expected = output.shape
        num_output_channels = k.shape[3]

        actual = Convolve.convolve_tensor_dataset_2(m, k)

        actual = actual.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_tensor_8_channel_output_for_3_channel_input_training_set_with_bias(self):
        """
        Test convolve layers.
        """
        training_set_size = 100

        m = np.ones((training_set_size, 64, 64, 3))  # 3 input channel 64x64 matrix

        k = np.ones((3, 3, 3, 8))  # 3x3 kernel, 3 input, 8 output channels
        bias = np.zeros((8))

        output = np.zeros((training_set_size, 64, 64, 8))
        expected = output.shape

        actual = Convolve.convolve_tensor_dataset_2(m, k, bias)

        actual = actual.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_cube_with_bias(self):
        """
        Test with bias
        """
        training_set_size = 2

        m1 = np.ones((2, 2, 5))
        h_pad = 1
        w_pad = 1
        m1 = Convolve.pad_cube(m1, (h_pad, w_pad))  # to 4x4x5

        expected_c1 = np.array([[20, 20], [20, 20]])
        expected_c2 = np.array([[140, 140], [140, 140]])
        m = np.ones((training_set_size, 4, 4, 5))
        m[0] = m1

        k = np.ones((3, 3, 5, 8))  # 3x3 kernel with 5 channels, 8 output channels
        k[:, :, :, 0] *= 0.5
        k[:, :, :, 2] *= 2

        bias = np.zeros((8))
        bias[0] = 10
        bias[2] = 100

        actual = Convolve.convolve_tensor_dataset_2(m, k, bias=bias, use_padding=False)

        actual_c1 = actual[0, :, :, 0]
        actual_c2 = actual[0, :, :, 2]

        result = np.allclose(actual_c1, expected_c1)
        self.assertTrue(result,
                        "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual_c1, expected_c1))

        result = np.allclose(actual_c2, expected_c2)
        self.assertTrue(result,
                        "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual_c2, expected_c2))

        expected = np.zeros((training_set_size, 2, 2, 8)).shape
        actual = actual.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_training_set_back(self):
        """
        Test convolve layers.
        """
        training_set_size = 1

        m = np.ones((training_set_size, 64, 64, 8))  # 1 layer matrix
        k = np.ones((7, 7, 3, 8))  # 3x3 kernel with 3 channels, 5 output channels
        output = np.zeros((training_set_size, 64, 64, 3))
        expected = output.shape
        num_output_channels = k.shape[3]

        actual = Convolve.convolve_tensor_dataset_back_2(m, k)

        actual = actual.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_flip_weight(self):
        """
        Test flip weight.
        """

        k = np.array([
            [
                [[1.11, 1.12, 1.13], [1.21, 1.22, 1.23]], [[2.11, 2.12, 2.13], [2.21, 2.22, 2.23]]
            ],
            [
                [[3.11, 3.12, 3.13], [3.21, 3.22, 3.23]], [[4.11, 4.12, 4.13], [4.21, 4.22, 4.23]]
            ],
        ])

        expected_shape = (2, 2, 2, 3)
        actual = Convolve.flip_weight(k)

        actual_shape = actual.shape
        result = (actual_shape == expected_shape)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (
            actual_shape, expected_shape))

        expected = np.array([
            [
                [[4.21, 4.22, 4.23], [4.11, 4.12, 4.13]], [[3.21, 3.22, 3.23], [3.11, 3.12, 3.13]]
            ],
            [
                [[2.21, 2.22, 2.23], [2.11, 2.12, 2.13]], [[1.21, 1.22, 1.23], [1.11, 1.12, 1.13]]
            ]
        ])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
