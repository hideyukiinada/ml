#!/usr/bin/env python
"""
Unit test conv backprop.  The objective of this test is just to make sure that the data flows and
accuracy is not measured.

Note
----
Use numpy.array_equal() to compare two arrays with integer elements.
Use numpy.allclose() to compare two arrays with floating-point number elements.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import numba
import unittest
import time
import numpy as np
#from project.convolve import Convolve
import numpy as np
from project.neuralnetwork import NeuralNetwork
from project.neuralnetwork import Model
from project.neuralnetwork import Layer
from project.neuralnetwork import ConvLayer
from project.activationfunction import ActivationFunction as af
from project.costfunction import CostFunction as cf

class TestConvolveBackProp(unittest.TestCase):

    def test_1(self):
        """
        Test convolve layers.
        """

        start_time = time.monotonic()

        x = np.random.randn(10, 64, 64, 3)  # Training set size = 100, 3 channels
        x = np.abs(x)
        x[0:x.shape[0]//2] = -x[0:x.shape[0]//2]

        y1 = np.ones((x.shape[0]//2,1))
        y2 = np.zeros((x.shape[0]//2,1))
        y = np.concatenate(((y1, y2)))

        model = Model(layer_dim=(64, 64, 3))
        model.add(ConvLayer(kernel_shape=(3, 3), strides=(2, 2), channels=5, use_padding=True, activation=af.RELU)) # to 32x32
        model.add(ConvLayer(kernel_shape=(3, 3), strides=(2, 2), channels=8, use_padding=True, activation=af.RELU, flatten=True)) # to 16x16
        model.add(Layer(13, activation=af.RELU))
        model.add(Layer(1, activation=af.SIGMOID))

        nn = NeuralNetwork(model, learning_rate=1e-2, cost_function=cf.CROSS_ENTROPY)  # layer no: 0, 1, 2

        nn.fit(x, y, epochs=5, verbose=True, interval=1)
        y_test = nn.predict(x)

        expected = (x.shape[0], 1)
        actual = y_test.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
