#!/usr/bin/env python
"""
Unit test Convolution class.

Note
----
Use numpy.array_equal() to compare two arrays with integer elements.
Use numpy.allclose() to compare two arrays with floating-point number elements.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import unittest
import numpy as np
from project.convolve import Convolve


class TestConvolve(unittest.TestCase):

    def test_pad_2x2(self):
        """
        Test against 2x2 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2], [0.3, 0.4]])

        actual = Convolve._pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_3x3(self):
        """
        Test against 3x3 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])

        actual = Convolve._pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_4x4(self):
        """
        Test against 4x4 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2], [1.3, 1.4, 1.5, 1.6]])

        actual = Convolve._pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 3, 4, 0, 0],
                             [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_2x2_with_2x2(self):
        """
        Test against 2x2 kernel resulting in 3x3 matrix
        """
        m = np.array([[1., 2.], [3., 4.]])
        k = np.array([[0.1, 0.2], [0.3, 0.4]])

        actual = Convolve.convolve2d(m, k)
        expected = np.array([[0.4, 1.1, 0.6], [1.4, 3.0, 1.4], [0.6, 1.1, 0.4]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_2x2_with_3x3(self):
        """
        Test against 3x3 kernel resulting in 2x2 matrix
        """
        m = np.array([[1., 2.], [3., 4.]])
        k = np.array([[0.1, 0.2, 0.3],
                      [0.4, 0.5, 0.6],
                      [0.7, 0.8, 0.9]])

        actual = Convolve.convolve2d(m, k)
        expected = np.array([[1. * 0.5 + 2 * 0.6 + 0.8 * 3 + 0.9 * 4, 0.4 * 1 + 0.5 * 2 + 0.7 * 3 + 0.8 * 4],
                             [1 * 0.2 + 2 * 0.3 + 3 * 0.5 + 4 * 0.6, 1 * 0.1 + 2 * 0.2 + 3 * 0.4 + 4 * 0.5]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_2x2_with_3x3_strides_2(self):
        """
        Test against 3x3 kernel resulting in 1x1 matrix with stride=2
        """
        m = np.array([[1., 2.], [3., 4.]])
        k = np.array([[0.1, 0.2, 0.3],
                      [0.4, 0.5, 0.6],
                      [0.7, 0.8, 0.9]])

        actual = Convolve.convolve2d(m, k, strides=(2, 2))
        expected = np.array([[1. * 0.5 + 2 * 0.6 + 0.8 * 3 + 0.9 * 4]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_3x3_with_3x3_strides_2(self):
        """
        Test against 3x3 kernel resulting in 2x2 matrix with stride=2
        """
        m = np.array([[1., 2., 3.],
                      [4., 5., 6.],
                      [7., 8., 9.]])
        k = np.array([[0.1, 0.2, 0.3],
                      [0.4, 0.5, 0.6],
                      [0.7, 0.8, 0.9]])

        actual = Convolve.convolve2d(m, k, strides=(2, 2))
        expected = np.array([[1 * 0.5 + 2 * 0.6 + 4 * 0.8 + 5 * 0.9, 2 * 0.4 + 3 * 0.5 + 5 * 0.7 + 6 * 0.8],
                             [4 * 0.2 + 5 * 0.3 + 7 * 0.5 + 8 * 0.6, 5 * 0.1 + 6 * 0.2 + 8 * 0.4 + 9 * 0.5]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_64x64_with_3x3_strides_2(self):
        """
        Test 64x64 matrix against 3x3 kernel resulting in 32x32 matrix with stride=2
        """
        m = np.random.normal(size=(64, 64))
        k = np.random.normal(size=(3, 3))

        actual_out = Convolve.convolve2d(m, k, strides=(2, 2))

        actual = actual_out.shape
        expected = (32, 32)

        result = np.array_equal(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_volume_size_2(self):
        """
        Test convolve layers.
        """
        m = np.ones((2, 2, 2))  # 2x2 matrix
        m[1] = m[1] * 2.0

        k = np.ones((2, 3, 3))  # 3x3 kernel

        actual = Convolve.convolve_volume(m, k)

        self.assertTrue(actual.shape == (2, 2))

        actual = actual
        expected_0 = np.array([[4, 4], [4, 4]])
        expected_1 = np.array([[8, 8], [8, 8]])
        expected = expected_0 + expected_1
        result = np.array_equal(actual, expected_0 + expected_1)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_volume_size_2_no_padding(self):
        """
        Test convolve layers.
        """
        m = np.ones((2, 2, 2))  # 2x2 matrix
        m[1] = m[1] * 2.0

        k = np.ones((2, 2, 2))  # 3x3 kernel

        actual = Convolve.convolve_volume(m, k, use_padding=False)

        self.assertTrue(actual.shape == (1, 1))

        actual = actual
        expected_0 = np.array([[4]])
        expected_1 = np.array([[8]])
        expected = expected_0 + expected_1
        result = np.array_equal(actual, expected_0 + expected_1)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_convolve_volume_output_8(self):
        """
        Test convolve layers.
        """
        m = np.ones((3, 64, 64))  # 3 layer 2x2 matrix
        m[1] = m[1] * 2.0

        k = np.ones((8, 3, 3, 3))  # 8 output, 3 layer 3x3 kernel

        output = np.zeros((8, 64, 64))
        num_kernel_set = k.shape[0]

        for i in range(num_kernel_set):
            actual = Convolve.convolve_volume(m, k[i])
            output[i] = actual

    def test_convolve_volume_output_8_over_training_set(self):
        """
        Test convolve layers.
        """
        training_set_size = 10

        m = np.ones((training_set_size, 3, 64, 64))  # 3 layer 2x2 matrix
        m[1] = m[1] * 2.0

        k = np.ones((training_set_size, 8, 3, 3, 3))  # 8 output, 3 layer 3x3 kernel

        output = np.zeros((training_set_size, 8, 64, 64))
        expected = output.shape
        num_kernel_set = k.shape[1]

        for i in range(training_set_size):
            for j in range(num_kernel_set):
                actual = Convolve.convolve_volume(m[i, :], k[i, j, :])
                output[i, j] = actual

        actual = output.shape
        result = (actual == expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
