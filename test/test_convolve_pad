#!/usr/bin/env python
"""
Unit test Convolution class for padding-related functions.

Note
----
Use numpy.array_equal() to compare two arrays with integer elements.
Use numpy.allclose() to compare two arrays with floating-point number elements.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import numba
import unittest
import numpy as np
from project.convolve import Convolve


class TestConvolvePad(unittest.TestCase):

    def test_pad_2x2(self):
        """
        Test against 2x2 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2], [0.3, 0.4]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_3x3(self):
        """
        Test against 3x3 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_4x4(self):
        """
        Test against 4x4 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2], [1.3, 1.4, 1.5, 1.6]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 3, 4, 0, 0],
                             [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
