#!/usr/bin/env python
"""
Unit test Convolution class for padding-related functions.

Note
----
Use numpy.array_equal() to compare two arrays with integer elements.
Use numpy.allclose() to compare two arrays with floating-point number elements.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import numba
import unittest
import numpy as np
from project.convolve import Convolve


class TestConvolvePad(unittest.TestCase):

    def test_interweave(self):
        """
        Test interweaving with 0.
        """
        m = np.array([[1, 2], [3, 4]])

        actual = Convolve.zero_interweave(m, 1)
        expected = np.array([[1., 0., 2., 0.], [0, 0, 0, 0], [3, 0, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_interweave2(self):
        """
        Test interweaving with 0.
        """
        m = np.array([[1, 2], [3, 4]])

        actual = Convolve.zero_interweave(m, 2)
        expected = np.array(
            [[1., 0., 0., 2., 0., 0.], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_2x2_uniform(self):
        """
        Test against 2x2 filter
        """
        m = np.array([[1, 2], [3, 4]])

        actual = Convolve.pad_matrix_uniform(m, 1)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_2x2_uniform_training_set(self):
        """
        Test against 2x2x2 filter
        """
        m = np.array([
            [
                [1, 2], [3, 4]
            ], [
                [5, 6], [7, 8]
            ]
        ])

        l = list()
        dataset_size = m.shape[0]
        h = m.shape[1]
        w = m.shape[2]

        pad_count = 1
        for i in range(m.shape[0]):
            padded = Convolve.pad_matrix_uniform(m[i], pad_count)
            l.append(padded)

        l2 = np.array(l)
        l3 = np.concatenate((l2))
        actual = l3.reshape((dataset_size, h + 2 * pad_count, w + 2 * pad_count))

        expected = np.array([
            [
                [0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0],
            ],
            [
                [0, 0, 0, 0], [0, 5, 6, 0], [0, 7, 8, 0], [0, 0, 0, 0]
            ]
        ])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_2x2_uniform_2(self):
        """
        Test against 2x2 filter
        """
        m = np.array([[1, 2], [3, 4]])

        actual = Convolve.pad_matrix_uniform(m, 2)
        expected = np.array(
            [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 3, 4, 0, 0], [0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_2x2(self):
        """
        Test against 2x2 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2], [0.3, 0.4]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_3x3(self):
        """
        Test against 3x3 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0], [0, 1, 2, 0], [0, 3, 4, 0], [0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_4x4(self):
        """
        Test against 4x4 filter
        """
        m = np.array([[1, 2], [3, 4]])
        k = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2], [1.3, 1.4, 1.5, 1.6]])

        actual = Convolve.pad_matrix(m, k)
        expected = np.array([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 3, 4, 0, 0],
                             [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

    def test_pad_cube(self):
        """
        Test against 4x4x3 filter
        """
        m = np.array([
            [
                [0.1, 0.2, 0.3], [0.4, 0.5, 0.6]
            ],
            [
                [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]
            ]
        ])

        expected = np.array([
            [
                [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
            [
                [0, 0, 0], [0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0, 0, 0],
            ],
            [
                [0, 0, 0], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2], [0, 0, 0],
            ],
            [
                [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]
            ]
        ])

        h_pad = 1
        w_pad = 1

        actual = Convolve.pad_cube(m, (h_pad, w_pad))

        result = np.allclose(actual, expected)
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


    # def test_convolve_tensor_8_channel_output_for_3_channel_input_training_set(self):
    #     """
    #     Test convolve layers.
    #     """
    #     training_set_size = 2
    #
    #     m = np.ones((training_set_size, 64, 64, 3))  # 3 layer 64x64 matrix
    #     m[1] = m[1] * 2.0
    #
    #     k = np.ones((3, 3, 3, 8))  # 3x3 kernel with 3 channels, 8 output channels
    #
    #     expected = np.zeros((training_set_size, 64, 64, 8)).shape
    #
    #     actual = Convolve.convolve_tensor_dataset_2(m, k)
    #
    #     actual = actual.shape
    #     result = (actual == expected)
    #     self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))
    #

    # def test_convolve_training_set_2(self):
    #     """
    #     Test convolve training set
    #     """
    #     training_set_size = 1
    #
    #     m = np.ones((training_set_size, 64, 64, 2))  # 1 layer matrix
    #     k = np.ones((7, 7, 2, 3))  # 7x7 kernel with 2 channels, 3 output channels
    #     output = np.zeros((training_set_size, 64, 64, 3))
    #     expected = output.shape
    #     num_output_channels = k.shape[3]
    #
    #     actual = Convolve.convolve_tensor_dataset_2(m, k)
    #
    #     actual = actual.shape
    #     result = (actual == expected)
    #     self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
