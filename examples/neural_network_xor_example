#!/usr/bin/env python
"""
Example code to demo make NeuralNetwork class learn xor.

I have observed multiple times that cost did not initially go down significantly,
and started a sharp descent between 50K and 100K epochs.

At the end of 200K epochs, I got below result for one of the runs, so please tweak the number of epochs if you still don't see
a sharp decrease.

Cost:
[200000/200000 epochs] Cost: 0.0022331

Test result:
[[0.00397398]
 [0.99829771]
 [0.99936583]
 [0.00348948]]

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging

import numpy as np
import sys
from project.neuralnetwork import NeuralNetwork
from project.neuralnetwork import Model
from project.neuralnetwork import Layer
from project.activationfunction import ActivationFunction as af
from project.costfunction import CostFunction as cf

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example to demonstrate NeuralNetwork class to learn xor."""
    model = Model(num_input=2)
    model.add(Layer(5, activation=af.RELU))
    model.add(Layer(3, activation=af.RELU))
    model.add(Layer(1, activation=af.SIGMOID))

    nn = NeuralNetwork(model, learning_rate=0.001, cost_function=cf.CROSS_ENTROPY)

    m = 1000
    r = np.random.rand(m) / 10.0
    r = np.abs(r)
    r = r.reshape((m, 1))

    x = np.zeros((m, 2)) + r
    y = np.zeros((m, 1))

    a = np.arange(0, m, 4)  # array([ 0.,  4.,  8., ..., 996])
    b = np.arange(1, m, 4)
    c = np.arange(2, m, 4)
    d = np.arange(3, m, 4)

    x[b, 0] = 1.0  # [1, 0]
    x[c, 1] = 1.0  # [0, 1]
    x[d,] = 1.0  # [1, 1]

    # Set the ground-truth of group b and c to 1
    y[b,] = 1.0
    y[c,] = 1.0
    nn.fit(x, y, epochs=300000, verbose=True, interval=1000)

    # Predict
    x_test = np.array([[0.02, 0.03], [0.1, 1], [1, 0.02], [1, 1]])
    y_hat = nn.predict(x_test)
    print(y_hat)


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()
