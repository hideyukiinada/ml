#!/usr/bin/env python
"""
Example code to demo GAN (Generative Adversarial Network) using the NeuralNetwork class and MNIST data.
This script generates digits from weights saved during training.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import os
import logging

import numpy as np
from pathlib import Path

from PIL import Image

from project.neuralnetwork import NeuralNetwork
from project.neuralnetwork import Model
from project.neuralnetwork import Layer
from project.activationfunction import ActivationFunction as af
from project.costfunction import CostFunction as cf
from project.optimizer import Optimizer as opt
from project.optimizer import AdamOptimizer
from project.weightparameter import WeightParameter as wparam

DISCRIMINATOR_WEIGHTS_FILE_PATH = "../../weights/gan_discriminator.h5"
GENERATOR_WEIGHTS_FILE_PATH = "../../weights/gan_generator.h5"
TMPDIR = "../../tmp"
NUM_IMAGES_TO_GENERATE = 256  # Number of sample images to generate

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))  # Change the 2nd arg to INFO to suppress debug logging


def example():
    """An example to show how to generate digits using GAN.
    """
    base_path = Path(TMPDIR)

    discriminator = Model(num_input=28 * 28)
    discriminator.add(Layer(512, activation=af.RELU))
    discriminator.add(Layer(1, activation=af.SIGMOID))

    generator_discriminator = Model(num_input=100)
    generator_discriminator.add(Layer(512, activation=af.LEAKY_RELU))
    generator_discriminator.add(Layer(28 * 28, activation=af.SIGMOID))
    generator_discriminator.add(Layer(512, activation=af.RELU))  # Needs to match discriminator
    generator_discriminator.add(Layer(1, activation=af.SIGMOID))  # Needs to match discriminator

    nn_discriminator = NeuralNetwork(discriminator, learning_rate=0.0002, cost_function=cf.CROSS_ENTROPY,

                                     optimizer=opt.ADAM,
                                     optimizer_settings=AdamOptimizer(beta1=0.5, beta2=0.999, epsilon=1e-8),
                                     batch_size=32)

    discriminator_weight_path = Path(DISCRIMINATOR_WEIGHTS_FILE_PATH)
    if discriminator_weight_path.exists():
        log.info("Discriminator weight file detected. Loading.")
        nn_discriminator.load(discriminator_weight_path)

    nn_generator_discriminator = NeuralNetwork(generator_discriminator,
                                               use_layer_from=[{"model": nn_discriminator,
                                                                "layer_map": [{"from": 1, "to": 3},
                                                                              {"from": 2, "to": 4}]}],

                                               learning_rate=0.0002, cost_function=cf.CROSS_ENTROPY,  # Slower than D
                                               optimizer=opt.ADAM,
                                               optimizer_settings=AdamOptimizer(beta1=0.5, beta2=0.999, epsilon=1e-8),
                                               batch_size=32,
                                               weight_parameter=wparam(init_type=wparam.NORMAL, stddev=0.02))

    generator_weight_path = Path(GENERATOR_WEIGHTS_FILE_PATH)
    if generator_weight_path.exists():
        log.info("Generator weight file detected. Loading.")
        nn_generator_discriminator.load(generator_weight_path)

    noise = np.random.normal(size=(NUM_IMAGES_TO_GENERATE, 100))

    print("Generating...")
    test_images = nn_generator_discriminator.predict_intermediate(noise, 2)

    for p in range(test_images.shape[0]):
        img = test_images[p].reshape((28, 28)).copy()
        img *= 255.0
        img_pil = Image.fromarray(np.uint8(img))
        image_path = base_path / Path("%d.jpg" % (p))
        img_pil.save(image_path)


def main():
    """Defines an application's main functionality"""
    example()


if __name__ == "__main__":
    main()
